apiVersion: v1
kind: Namespace
metadata:
  name: docker-registry
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: acme-issuer
  labels:
    app: certificate
    tier: backend
spec:
  acme:
    email: {{ .Values.emailContact}}
    server: https://acme-v01.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: acme-issuer-account-key
    solvers:
    - http01: 
        ingress:
          class: nginx
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: docker-registry
  labels:
    app: certificate
    tier: backend
spec:
  secretName: docker-registry-tls-certificate
  issuerRef:
    name: acme-issuer
  dnsNames:
  - {{ .Values.host}}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: docker-registry-pv
  namespace: docker-registry
  labels:
    app: registry
    tier: backend
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.registryStorage}}
---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry
  namespace: docker-registry
  labels:
    app: registry
    tier: backend
type: Opaque
data:
  HTPASSWD: {{ .Values.htpasswd}}
---
kind: Service
apiVersion: v1
metadata:
  name: redis
  namespace: docker-registry
  labels:
    app: redis
    tier: backend
spec:
  selector:
    app: redis
  ports:
  - name: http
    port: 6379
    targetPort: 6379
---      
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  namespace: docker-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: backend
    spec:
      containers:
        - image: redis:6.0.8
          name: master
          imagePullPolicy: Always
          volumeMounts:
            - name: redisdata
              mountPath: /data
              subPath: redisdata
      volumes:
        - name: redisdata
          persistentVolumeClaim:
            claimName: redisdata
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: redisdata
  namespace: docker-registry
  labels:
    app: redis
    tier: backend
  annotations:
    volume.alpha.kubernetes.io/storage-class: default
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 5Gi      
---    
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-registry
  namespace: docker-registry
  labels:
    app: registry
    tier: frontend
data:
  registry-config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: redis
      filesystem:
        rootdirectory: /var/lib/registry
    redis:
      addr: redis-master:6379
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
    auth:
      htpasswd:
        realm: basic-realm
        path: /auth/htpasswd
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cronfile
  namespace: docker-registry
  labels:
    app: registry
    tier: frontend
data:
  cronfile: 0 */12 * * *    bin/registry garbage-collect /etc/docker/registry/config.yml
---
kind: Service
apiVersion: v1
metadata:
  name: registry
  namespace: docker-registry
  labels:
    app: registry
    tier: frontend
spec:
  selector:
    app: registry
  ports:
  - name: http
    port: 5000
    targetPort: 5000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  namespace: docker-registry
  labels:
    app: registry
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: docker-registry
  template:
    metadata:
      labels:
        app: docker-registry
    spec:
      containers:
        - name: docker-registry
          image: registry:2.6.2
          imagePullPolicy: Always
          ports:
          - name: http
            containerPort: 5000
          volumeMounts:
          - name: config
            mountPath: /etc/docker/registry
            readOnly: true
          - name: htpasswd
            mountPath: /auth
            readOnly: true
          - name: docker-registry-persistent-storage
            mountPath: /var/lib/registry
          - name: cronfile
            mountPath: /etc/crontabs/
      volumes:
        - name: config
          configMap:
            name: docker-registry
            items:
              - key: registry-config.yml
                path: config.yml
        - name: htpasswd
          secret:
            secretName: docker-registry
            items:
            - key: HTPASSWD
              path: htpasswd
        - name: docker-registry-persistent-storage
          persistentVolumeClaim:
            claimName: docker-registry-pv
        - name: cronfile
          configMap:
            name: cronfile
---
apiVersion: networking.k8s.io/v1 
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
  name: docker-registry
  namespace: docker-registry
  labels:
    app: registry
    tier: frontend
spec:
  tls:
  - hosts:
    - {{ .Values.host}}
    secretName: docker-registry-tls-certificate
  rules:
  - host: {{ .Values.host}}
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: registry
              port: 
                number: 5000